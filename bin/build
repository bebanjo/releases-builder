#!/usr/bin/env ruby

require 'date'
require 'yaml'
require 'open-uri'
require 'base64'

require 'rubygems'
require 'bundler'
Bundler.require(:build)
Dotenv.load

def parse_date(str)
  begin
    date = DateTime.parse(str).strftime('%Y-%m-%d')
    return date
  rescue
    puts '-----> ERROR:   Invalid date'
  end
end

def get_title(body)
  begin
    frontmatter = YAML.load(body)
    title = frontmatter['title']
    return title
  rescue
    puts '-----> ERROR:   Invalid frontmatter'
  end
end

def get_slug(body)
  begin
    frontmatter = YAML.load(body)
    slug = frontmatter['title'].to_slug.normalize.to_s
    return slug
  rescue
    puts '-----> ERROR:   Invalid frontmatter'
  end
end

def get_filename(body)
  begin
    frontmatter = YAML.load(body)
    title = frontmatter['title'].to_slug.normalize.to_s
    date = parse_date(frontmatter['date'].to_s)
    filename = "#{date}-#{title}"
    puts "-----> File:    #{filename}.md"
    return filename
  rescue
    puts '-----> ERROR:   Invalid frontmatter'
  end
end

def prepare_content(body)
  content = Hash.new
  name = get_filename(body)
  updated_body = body

  regex = /[\"|\(](https:\/\/cloud.githubusercontent.com\/.*|https:\/\/user-images.githubusercontent.com\/.*)[\"|\)]/
  attachments = body.scan(regex).uniq  

  attachments.each_with_index do |attachment, i|
    extension = attachment[0].split('.').last
    file = open(attachment[0]) { |f| f.read }
    blob = Base64.encode64(file)
    index = "%02d" % (i + 1)
    filename = "media/#{name}-#{index}.#{extension}"
    content[filename] = blob
    updated_body.gsub!(attachment[0], "../#{filename}")
  end
  
  content["_posts/#{name}.md"] = Base64.encode64(updated_body)
  return content
end

# https://github.com/jollygoodcode/jollygoodcode.github.io/issues/14
def commit(client, repo, ref, branch, message, content)
  begin
    base_branch = client.refs(repo).find do |reference|
      "refs/heads/#{ref}" == reference.ref
    end
    
    base_branch_sha = base_branch.object.sha
    new_branch = client.create_ref(repo, "heads/#{branch}", base_branch_sha)
    
    new_tree = content.map do |path, new_content|
      Hash(
        path: path,
        mode: '100644',
        type: 'blob',
        sha: client.create_blob(repo, new_content, 'base64')
      )
    end
    
    commit = client.git_commit(repo, new_branch['object']['sha'])
    tree = commit['tree']
    new_tree = client.create_tree(repo, new_tree, base_tree: tree['sha'])
    new_commit = client.create_commit(repo, message, new_tree['sha'], commit['sha'])
    
    client.update_ref(repo, "heads/#{branch}", new_commit['sha'])
  rescue
    false
  end
end

def pr(client, repo, ref, branch, title, body)
  begin
    client.create_pull_request(repo, ref, branch, title, body)
  rescue
    false
  end
end

token = ENV['TOKEN']
repo  = ENV['REPO']
ref   = ENV['REF']
label = ENV['LABEL']

client = Octokit::Client.new(:access_token => token)
Octokit.auto_paginate = true

issues = client.list_issues(repo)
releases = issues.map do |issue|
  issue[:body] = issue[:body].gsub(/^([ ?[-_*]]{3,} ?)[\t]*/,'---') # The Steve Parser (TM)
  issue if issue[:body].to_s.split("\n").first.include?('---')
end.compact

if releases.size > 0
  releases.each do |release|
    labels = client.labels_for_issue(repo, release[:number])

    ready = false
    if labels.size > 0
      labels.each do |l|
        if l['name'].include?(label)
          ready = true
        end
      end
    end
    
    if ready
      title   = get_title(release[:body])
      puts "-----> Title:   #{title}"
      
      slug    = get_slug(release[:body])
      puts "-----> Slug:    #{slug}"
      
      branch  = "#{release[:number]}-#{get_slug(release[:body])}"
      content = prepare_content(release[:body])
      
      commit_output = commit(client, repo, ref, branch, "Implements ##{release[:number]}. This commit was autogenerated.", content)
      if commit_output
        puts "-----> Branch:  https://github.com/#{repo}/compare/#{branch}"
      else
        puts '-----> Branch:  Already exists!'
      end
      
      pr_output = pr(client, repo, ref, branch, title, "Implements ##{release[:number]}. This PR was autogenerated.")
      if pr_output
        puts "-----> PR:      #{pr_output[:url]}"
      else
        puts '-----> PR:      Already exists!'
      end
      
      puts
    end
  end
end

puts '-----> Done!'